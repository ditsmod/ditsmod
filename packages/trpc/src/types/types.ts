import {
  AnyFn,
  AnyObj,
  BaseAppOptions,
  BaseMeta,
  GlobalInitHooks,
  InjectionToken,
  ModRefId,
  Override,
  Provider,
} from '@ditsmod/core';
import { AnyRouter, initTRPC } from '@trpc/server';
import type { CreateHTTPHandlerOptions } from '@trpc/server/adapters/standalone';
import type {
  NodeHTTPCreateContextFnOptions,
  NodeHTTPRequest,
  NodeHTTPResponse,
} from '@trpc/server/adapters/node-http';
import type * as http from 'node:http';
import type { Http2ServerRequest, Http2ServerResponse } from 'http2';

import type { HttpModule } from '#types/http-module.js';
import type { HttpServer, ServerOptions } from '#types/server-options.js';
import { TrpcInitMeta, TrpcModRefId } from '#decorators/trpc-init-hooks-and-metadata.js';
import { TrpcProviderImport } from '#init/trpc-shallow-modules-importer.js';
import { GuardPerMod1 } from '#interceptors/guard.js';
import { ControllerMetadata } from './controller-metadata.js';
import { HttpInterceptor } from '#interceptors/tokens-and-types.js';

const t = initTRPC.create();

export class TrpcAppOptions extends BaseAppOptions {
  httpModule?: HttpModule | null = null;
  serverOptions?: ServerOptions = {};
}
/**
 * A DI token that allows you to obtain the instance of the server that is serving the current application.
 */
export const SERVER = new InjectionToken<http.Server>('SERVER');

export type TrpcCreateOptions = Parameters<typeof initTRPC.create>[0];
export type TrpcRouterOpts = CreateHTTPHandlerOptions<AnyRouter>;
export type TrpcCreateCtxOpts = NodeHTTPCreateContextFnOptions<NodeHTTPRequest, NodeHTTPResponse>;
export type RawRequest = http.IncomingMessage | Http2ServerRequest;
export type RawResponse = http.ServerResponse | Http2ServerResponse;
export type RequestListener = (request: RawRequest, response: RawResponse) => void | Promise<void>;
export type TrpcRootObject<T extends AnyObj> = ReturnType<ReturnType<typeof initTRPC.context<T>>['create']>;
export type SetAppRouterOptions = Override<TrpcRouterOpts, { router?: never; createContext?: never }>;
export type RouterOptions = Parameters<typeof t.router>[0];
export interface TrpcRootModule {
  /**
   * Passing options for {@link initTRPC.create | initTRPC.create()}
   */
  setTrpcCreateOptions?(): TrpcCreateOptions;
  /**
   * For the root application module (AppModule), this method is automatically invoked by `@ditsmod/trpc`.
   */
  setAppRouter(): SetAppRouterOptions;
}

export interface ModuleWithTrpcRoutes<Config extends AnyObj = AnyObj> {
  getRouterConfig(): Config;
}

export type AppRouterHelper<ArrOfRouterConfig extends readonly ModRefId<ModuleWithTrpcRoutes>[]> = ReturnType<
  typeof t.mergeRouters<MutableArr<ArrOfRouterConfig>>
>;
type MutableArr<ArrOfRouterConfig> = { -readonly [K in keyof ArrOfRouterConfig]: RouterOf<ArrOfRouterConfig[K]> };
export type RouterOf<I> =
  I extends ModRefId<ModuleWithTrpcRoutes<infer RouterConfigOrFn>>
    ? ReturnType<typeof t.router<GetRouterConfig<RouterConfigOrFn>>>
    : never;
type GetRouterConfig<T> = {
  [K in keyof T]: T[K] extends AnyFn<any, infer R> ? CtrlOrModuleFn<R> : GetRouterConfig<T[K]>;
};
type CtrlOrModuleFn<F> = F extends AnyFn ? F : GetRouterConfig<F>;
export class TrpcGlobalProviders extends GlobalInitHooks {
  importedProvidersPerMod = new Map<any, TrpcProviderImport>();
  importedProvidersPerRou = new Map<any, TrpcProviderImport>();
  importedProvidersPerReq = new Map<any, TrpcProviderImport>();
  importedMultiProvidersPerMod = new Map<TrpcModRefId, Provider[]>();
  importedMultiProvidersPerRou = new Map<TrpcModRefId, Provider[]>();
  importedMultiProvidersPerReq = new Map<TrpcModRefId, Provider[]>();
}

/**
 * See also https://en.wikipedia.org/wiki/URL_redirection#HTTP_status_codes_3xx
 */

export type RedirectStatusCodes = 300 | 301 | 302 | 303 | 307 | 308;
/**
 * This metadata is generated by `RoutesExtension` group, and available for other extensions
 * that need set routes. The target for this metadata is `PreRouterExtension` group.
 */

export class MetadataPerMod3 {
  baseMeta: BaseMeta;
  meta: TrpcInitMeta;
  aControllerMetadata: ControllerMetadata[];
  guards1: GuardPerMod1[];
}

/**
 * This metadata is generated by PreRouterExtension as internal type that need only for it.
 */

export interface PreparedRouteMeta {
  moduleName: string;
  handle: (rawReq: RawRequest, rawRes: RawResponse) => Promise<void>;
  countOfGuards: number;
}

export type Fn = (...args: any[]) => any;
export type Args<T> = T extends (...args: infer A) => any ? A : never;
export type Level = 'Req' | 'Rou' | 'Mod';
export const HTTP_INTERCEPTORS = new InjectionToken<HttpInterceptor[]>('HTTP_INTERCEPTORS');
/**
 * DI token for native webserver request.
 */
export const RAW_REQ = new InjectionToken<RawRequest>('RAW_REQ');
/**
 * DI token for native webserver response.
 */
export const RAW_RES = new InjectionToken<RawResponse>('RAW_RES');
