import { HttpMethod, ModuleExtract, GlobalInitHooks, BaseMeta, Provider } from '@ditsmod/core';

import { GuardPerMod1 } from '#interceptors/guard.js';
import { TrpcProviderImport } from '#init/trpc-shallow-modules-importer.js';
import { ControllerMetadata } from './controller-metadata.js';
import { TrpcInitMeta, TrpcModRefId } from '#decorators/trpc-init-hooks-and-metadata.js';

export class TrpcGlobalProviders extends GlobalInitHooks {
  importedProvidersPerMod = new Map<any, TrpcProviderImport>();
  importedProvidersPerRou = new Map<any, TrpcProviderImport>();
  importedProvidersPerReq = new Map<any, TrpcProviderImport>();
  importedMultiProvidersPerMod = new Map<TrpcModRefId, Provider[]>();
  importedMultiProvidersPerRou = new Map<TrpcModRefId, Provider[]>();
  importedMultiProvidersPerReq = new Map<TrpcModRefId, Provider[]>();
}

/**
 * See also https://en.wikipedia.org/wiki/URL_redirection#HTTP_status_codes_3xx
 */
export type RedirectStatusCodes = 300 | 301 | 302 | 303 | 307 | 308;

/**
 * This metadata is generated by `RoutesExtension` group, and available for other extensions
 * that need set routes. The target for this metadata is `PreRouterExtension` group.
 */
export class MetadataPerMod3 {
  baseMeta: BaseMeta;
  prefixPerMod: string;
  meta: TrpcInitMeta;
  aControllerMetadata: ControllerMetadata[];
  guards1: GuardPerMod1[];
}

export interface ObjectAny {
  [k: string]: any;
}

/**
 * This metadata is generated by PreRouterExtension as internal type that need only for it.
 */
export interface PreparedRouteMeta {
  moduleName: string;
  httpMethods: HttpMethod[];
  fullPath: string;
  countOfGuards: number;
}

export type Fn = (...args: any[]) => any;

export type Args<T> = T extends (...args: infer A) => any ? A : never;

export enum RouteType {
  static = 0,
  root = 1,
  param = 2,
  catchAll = 3,
}

export class TreeConfig {
  path?: string = '';
  wildChild?: boolean = false;
  type?: number = RouteType.static;
  indices?: string = '';
  children?: any[] = [];
  handle?: Fn | null = null;
  priority?: number = 0;
}

export interface RouteParam {
  key: string;
  value: string;
}
export type Level = 'Req' | 'Rou' | 'Mod';

export class TrpcModuleExtract extends ModuleExtract {
  path: string;
}
